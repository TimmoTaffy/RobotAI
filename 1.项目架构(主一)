RobotAI/
├── common/                    # 公共数据类型和工具
│   └── types.py               # 标准数据结构（Pose2D/Pose3D, Transform, SensorData等）
├── sensors/                   # 统一管理传感器输入，输出标准数据类型 (ImuData, WheelData, LidarData 等)
│   ├── serial_receiver.py     # 接收并预处理 JSON 数据，添加时间戳、numpy转换
│   ├── imu.py                 # 获取 IMU 数据，输出 ImuData
│   ├── wheel_encoder.py       # 获取轮速数据，输出 WheelData
│   ├── lidar.py               # 获取点云数据，输出 LidarData
│   ├── magnetometer.py        # 获取磁力计数据，输出 MagData
│   ├── base_gyro.py           # 获取底盘陀螺仪数据，输出 GyroData
│   ├── radar_station.py       # 获取雷达站定位数据，输出 RadarStationData
│   └── vision.py              # 获取视觉识别结果，输出 VisionData
│
├── transforms/                # 坐标变换模块，使用 Transform 类型描述各系间变换
│   ├── camera_to_vehicle.py   # 相机→车体，支持点云和图像投影
│   ├── lidar_to_vehicle.py    # 雷达→车体，支持批量点云转换
│   ├── turret_to_vehicle.py   # 云台→车体，处理 Pose3D 转换
│   └── vehicle_to_world.py    # 车体→世界，处理平面 Pose2D 转换
│
├── localization/              # 自车状态估计（A子线）实现 Dead Reckoning、IMU 标定和 EKF 融合，输出 (x,y,θ,v)
│   ├── dead_reckoning.py      # 纯轮速推算
│   ├── imu_calibration.py     # IMU 标定、补偿
│   ├── ekf_fusion.py          # EKF 融合：轮速 + IMU + 磁力计 + 底盘陀螺仪
│   └── turret_pose.py         # 云台姿态估计：根据陀螺仪、磁力计和电机角度数据，解算俯仰角、偏航角和电机角度，更新到 world_model
│
├── mapping/                   # 地图构建（B子线）接 Livox 点云，去地面→聚类→生成占据栅格或障碍列表
│   ├── lidar_processor.py     # 点云滤地面、聚类
│   ├── occupancy_grid.py      # 栅格地图生成
│   └── map_builder.py         # 统一接口
│
├── tracking/                  # 敌人 & 动态障碍跟踪 接收来自 radar/vision/world_model 的目标，维护跟踪列表
│   └── target_tracker.py      # 多源融合、置信度管理
│
├── world_model.py             # 统一的数据结构：自车、敌人、静/动障碍、任务点、雷达站机器人信息
│                              # 包括云台姿态（俯仰角、偏航角）和电机角度（水平、垂直）
│
└── 2.3 主控输出JSON协议       # 定义主控发送的 JSON 数据格式，包括新增的云台电机角度字段