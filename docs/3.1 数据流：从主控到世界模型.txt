# 数据流设计：从主控到世界模型

下面用端到端流程图说明数据处理及核心标准化工作：

1. 主控发送数据 (JSON)
• 输出：结构化 JSON（见 2.3 主控输出JSON协议）
• 包含：timestamp, imu, wheel, lidar, radar_station, vision, turret 等传感器字段

2. 串口接收 (SerialReceiver)
• 功能：接收并解析主控 JSON，添加本地时间戳，转换数组为 numpy.ndarray
• 输出：预处理后的原始数据字典

3. 数据标准化
• 将原始字典转换为标准数据类型（定义在 common/types.py）：
  - ImuData: imu 数据
  - WheelData: 轮速计数据
  - LidarData: 点云数据
  - TurretState: 云台姿态和电机角度
  - RadarStationData: 雷达站识别结果
  - VisionData: 视觉识别结果
• 示例：
```python
from common.types import ImuData
imu_data = ImuData(
    timestamp=raw["timestamp"],
    frame_id="imu_link",
    angular_velocity=raw["imu"]["gyro"],
    linear_acceleration=raw["imu"]["acc"],
    orientation=np.array([0.0, 0.0, raw["imu"]["yaw"]])
)
```

4. 坐标变换
• 使用 Transform, Pose2D, Pose3D 类型统一描述变换关系
• 调用 transforms 模块接口：
  - camera_to_vehicle, lidar_to_vehicle, turret_to_vehicle, vehicle_to_world

5. 模块处理
  5.1 自车状态估计（Localization）
    • DeadReckoning + WheelData → dr_pose (Pose2D)
    • IMUCalibration → 校准 IMU 数据
    • EKFFusion(dr_pose, ImuData, calib_imu) → self_pose (Pose2D)
    • TurretPose(ImuData) → turret_state (TurretState)
  5.2 环境感知与地图构建（Mapping）
    • LidarProcessor.filter/process → 非地面点 & 聚类簇
    • generate_occupancy_grid → occupancy_grid (np.ndarray)
  5.3 目标跟踪（Tracking）
    • RadarStationData + VisionData → TargetTracker.update → tracked_targets

6. WorldModel 更新  
• 在主循环中依次调用并填充：  
```python  
# 1.5 Localization: 更新自车位姿和云台状态  
dr_pose = dr.update(wheel_data)  
calib_imu = imu_calib.update(imu_data)  
self_pose = ekf.update(dr_pose, imu_data, calib_imu)  
turret_state = turret_localizer.update(imu_data)  
wm.self_pose = self_pose        # Pose2D  
wm.turret_state = turret_state  # TurretState    
  
# 3. Mapping: 构建地图并更新 Occupancy Grid  
grid, clusters = build_map(raw_lidar.points, grid_size, map_size, wm)  
wm.occupancy_grid = grid       # np.ndarray 二维栅格地图  
wm.dynamic_obstacles = clusters  # List[np.ndarray] 动态障碍簇列表  
  
# 4. Tracking: 更新目标列表  
tracked = tracker.update(radar_data, vision_data)  
wm.robots = tracked  # List[TrackedTarget] 或 RobotInfo  
```  
• 最终得到包含自车位姿、栅格地图、动态障碍和目标列表的完整 WorldModel，用于下游规划和控制
```