RobotAI 系统架构设计

本项目基于「分层模块化架构」，实现哨兵机器人多传感器融合与实时世界建模。核心层次如下：
1. 传感层（Sensors） - 多源数据采集与标准化
2. 感知层（Perception） - ---
## 测试与质量保证
81测试函数，覆盖率100%：
tests/
├── test_comprehensive_planning.py    # 综合路径规划测试(17个：基础A*+战术规划+集成)
├── test_enhanced_tracker.py          # 增强跟踪器测试(13个：卡尔曼滤波+威胁评估)
├── test_motion_planner.py           # 运动规划测试(6个)
├── test_trajectory_tracker.py       # 轨迹跟踪测试(7个)
├── test_mpc_controller.py           # MPC控制测试(7个)
├── test_high_level_fsm.py           # 基础状态机测试(10个)
├── test_intelligent_fsm.py          # 智能状态机测试(11个：决策逻辑+战术评估)
├── test_integration.py              # 系统集成测试
├── visualize_comprehensive_planning.py  # 综合规划可视化
├── visualize_control_comparison.py      # 控制器对比可视化
└── visualize_tracking_comparison.py     # 跟踪器配置对比可视化层（Planning） - 路径规划与运动规划
4. 控制层（Control） - 轨迹跟踪与执行
5. 集成层（Integration） - 系统协调与数据流管理

---
## 传感层设计

### 数据标准化
统一接口处理各传感器数据，输出标准数据类型：
sensors/
├─ serial_receiver.py   # JSON接收与预处理（时间戳、numpy转换）
├─ imu.py               # IMU → ImuData
├─ wheel_encoder.py     # 轮速 → WheelData
├─ lidar.py             # 点云 → LidarData
├─ magnetometer.py      # 磁力计 → MagData
├─ base_gyro.py         # 陀螺仪 → GyroData
├─ radar_station.py     # 雷达站 → RadarStationData
└─ vision.py            # 视觉识别 → VisionData

### 坐标变换
高效批量转换多坐标系：
transforms/
├─ camera_to_vehicle.py # 相机→车体投影
├─ lidar_to_vehicle.py  # 雷达→车体点云转换
├─ turret_to_vehicle.py # 云台→车体Pose3D转换
└─ vehicle_to_world.py  # 车体→世界Pose2D平面转换

---
## 感知层设计

### A子线：自车定位
localization/
├─ dead_reckoning.py    # 轮速推算
├─ imu_calibration.py   # IMU标定与补偿
└─ ekf_fusion.py        # EKF融合(轮速+IMU+磁力计+陀螺仪)
**输出**：`(x, y, θ, v)` + 云台姿态

### B子线：环境建图
mapping/
├─ lidar_processor.py   # 点云滤地+聚类
├─ occupancy_grid.py    # 占据栅格地图生成
└─ map_builder.py       # 世界模型更新接口
**输出**：`occupancy_grid` + `static_obstacles`

### C子线：目标跟踪
tracking/
├─ enhanced_tracker.py      # 卡尔曼滤波跟踪器 (推荐)
└─ __init__.py             # 统一接口和工厂函数
**输出**：`enhanced_targets` + `threat_assessment`

---
## 决策层设计

### 路径与运动规划
planning/
├─ path_planner.py       # A*全局规划 (基础几何规划)
├─ tactical_planner.py   # 战术路径规划 (威胁评估+安全分析)
└─ motion_planner.py     # B样条轨迹平滑+速度配置 (6单元测试)
*特点：基础A*实时(<1s for 100×100地图) + 战术AI(威胁规避) + 曲率连续平滑

---
## 控制层设计

### 双控制器实现
control/
├─ trajectory_tracker.py # Pure Pursuit (7单元测试)
└─ mpc_controller.py     # MPC (7单元测试)
*Pure Pursuit：O(1)算法，<0.0001s/次
*MPC：预测优化，考虑速度/转角约束

---
## 集成层设计

### 状态机架构
host/
├── high_level_fsm.py        # 工具层：基础状态管理和硬件接口
└── intelligent_fsm.py       # 战法层：智能决策和战术评估

状态机分层设计：
- High-Level FSM：提供基础工具（状态转换、事件驱动、硬件接口）
- Intelligent FSM：实现高级战法（威胁评估、多因素决策、预测性行为）

### 世界模型中枢
class WorldModel:
    robot_pose: Pose2D
    occupancy_grid: OccupancyGrid
    dynamic_obstacles: List[Obstacle]
    enemy_targets: List[Target]
    turret_state: TurretPose
    enhanced_tracker: EnhancedTargetTracker    # 集成增强跟踪器
    tactical_info: TacticalInfo                # 战术评估信息

### 主循环流程
def main_loop():
    data = collect_sensors()
    update_localization(data)
    update_mapping(data)
    update_tracking(data)
    world_model.update_tactical_assessment()   # 战术评估
    if mission:
        path = plan_path()
        traj = plan_motion(path)
    cmd = track(traj)
    send_control(cmd)

---
## 测试与质量保证
60测试函数，覆盖率100%：
tests/
├─ test_comprehensive_planning.py    # 综合路径规划测试(17个：基础A*+战术规划+集成)
├─ test_enhanced_tracker.py          # 增强跟踪器测试(13个：卡尔曼滤波+威胁评估)
├─ test_motion_planner.py           # 运动规划测试(6个)
├─ test_trajectory_tracker.py       # 轨迹跟踪测试(7个)
├─ test_mpc_controller.py           # MPC控制测试(7个)
├─ test_high_level_fsm.py           # 状态机测试(10个)
├─ test_integration.py              # 系统集成测试
├─ visualize_comprehensive_planning.py  # 综合规划可视化
├─ visualize_control_comparison.py      # 控制器对比可视化
└─ visualize_tracking_comparison.py     # 跟踪器配置对比可视化
